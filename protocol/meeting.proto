syntax = "proto3";
package Meeting.rtc;

option go_package="./pb";
// Defines LiveKit access information.
message LiveKit{
  string token = 2;
  string URL = 3;
}

// Information about a specific meeting.
message MeetingInfo {
  string title = 2;
  string creatorUserID = 3;
  int64 scheduledTime = 4;
  string status = 5;
  int64 meetingDuration = 6;
  int64 startTime = 7;
  string password = 8;
}

// Settings controlling meeting features.
message MeetingSetting {
  bool participantCanUnmuteSelf = 1;
  bool participantCanEnableVideo = 2;
  bool onlyHostCanInviteUser = 3;
  bool onlyHostCanShareScreen = 4;
  bool joinDisableMicrophone = 5;
  bool joinDisableVideo = 6;
  bool isMuteAllVideo = 7;
  bool isMuteAllMicrophone = 8;
}

// Detailed information about a meeting, combining info and settings.
message MeetingDetail {
  string meetingID = 1;
  MeetingInfo info = 2;
  MeetingSetting setting = 3;
}

// Request to create an immediate meeting.
message CreateImmediateMeetingReq {
  MeetingInfo info = 1;
  MeetingSetting setting = 2;
}

// Response after creating an immediate meeting.
message CreateImmediateMeetingResp {
  MeetingDetail detail = 1;
  LiveKit liveKit = 2;
}

// Request to book a future meeting.
message BookMeetingReq {
  MeetingInfo info = 1;
  MeetingSetting setting = 2;
}

// Response after booking a meeting.
message BookMeetingResp {
  MeetingDetail detail = 1;
}

// Request to join a meeting.
message JoinMeetingReq {
  string meetingID = 1;
  string userID = 2;  // User who joins the meeting
  string password = 3;
}

// Response after joining a meeting.
message JoinMeetingResp{
  LiveKit liveKit = 1;
}

// Request to get all meetings created by a specific user and filter by status.
message GetCreatedMeetingsReq {
  string userID = 1;
  string status = 2;
}

// Response with a list of meetings created by the user.
message GetCreatedMeetingsResp {
  repeated MeetingDetail MeetingDetails = 1;
}

// Request to get information about a specific meeting.
message GetMeetingReq {
  string meetingID = 1;
}

// Response with detailed information about a meeting.
message GetMeetingResp {
  MeetingDetail MeetingDetail = 1;
}

// Request to update a meeting.
message UpdateMeetingReq {
  MeetingDetail detail = 1;
}

// Response after updating a meeting.
message UpdateMeetingResp {
}

// Request to end a meeting.
message EndMeetingReq {
  string meetingID = 1;
  string userID = 2;
}

// Response after ending a meeting.
message EndMeetingResp {
}

// Request to leave a meeting.
message LeaveMeetingReq {
  string meetingID = 1;
  string userID = 2; // User who leaves the room
}

// Response after leaving a meeting.
message LeaveMeetingResp {
}

// Information about media type settings.
message MediaTypeInfo {
  int32 mediaType = 1;  // Media type, e.g., video, audio
  int32 enableStatus = 2; // Disable or enable status for the media type
}

// Request to toggle media settings in a meeting.
message ToggleMeetingMediaReq {
  MediaTypeInfo mediaTypeInfo = 1;
}

// Response after toggling media settings.
message ToggleMeetingMediaResp {
}

// Request to manage media settings for a user in a meeting.
message ManageMeetingMediaReq {
  MediaTypeInfo mediaTypeInfo = 1;
  string userID = 2;
}

// Response after managing media settings.
message ManageMeetingMediaResp {
}

// Information about meeting action types.
message MeetingActionTypeInfo {
  // Refers to pin user up to the user list or to be watched by other users.
  int32 meetingAction = 1;
  int32 addOrRemove = 2;
}

// Request to update actions in a meeting.
message UpdateMeetingActionReq {
  MeetingActionTypeInfo meetingActionTypeInfo = 1;
  string userID = 2;
}

// Response after updating meeting actions.
message UpdateMeetingActionResp {
}

// Request to retrieve detailed meeting information.
message GetMeetingDetailInfoReq {
  string meetingID = 1;
}

// Defines services related to meeting management.
service MeetingService {
}