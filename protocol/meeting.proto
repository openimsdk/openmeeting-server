syntax = "proto3";
package Meeting.rtc;

import "sdkws/sdkws.proto";

option go_package="./pb";


message ParticipantMetaData{
  OpenIMServer.sdkws.GroupInfo groupInfo = 1;
  OpenIMServer.sdkws.GroupMemberFullInfo groupMemberInfo = 2;
  OpenIMServer.sdkws.PublicUserInfo userInfo = 3;
}

// update global meeting configuration for user
message UpdateUserGlobalMeetingConfReq {
  uint64 configFlag  = 1;
}

message UpdateUserGlobalMeetingConfResp {
  uint64 configFlag  = 1;
}

//
message  PreBookCreateMeetingReq {
  int64 meetingDuration = 1;
  string roomID = 2;
  string meetingName = 3;
  string meetingHostUserID = 4;
  ParticipantMetaData participant = 5;
  repeated string invitedUserIDList = 6;
  int64 startTime = 7;
  string ex = 8;
}

message TypeUserIdListData {
  int32 type = 1;
  repeated string UserIDList = 2;
}

message  PreBookCreateMeetingResp {
  string token = 1;
  string roomID = 2;
  string liveURL = 3;
}

message  PreBookUpdateMeetingReq {
  string roomID = 1;
  string meetingName = 2;
  int64  startTime = 3;
  int64  endTime = 4;
  repeated TypeUserIdListData userIDList = 5;
}

message  PreBookUpdateMeetingResp {
}


message DeleteMeetingRecordsReq {
  repeated string roomIDs = 1;
}

message DeleteMeetingRecordsResp {
}

message QuickCreateMeetingReq {
  string meetingName = 1;
  int64  meetingConfigFlag = 2;

}

// quick start meeting
message QuickCreateMeetingResp {
  string token = 1;
  string roomID = 2;
  string liveURL = 3;
}

message InvitationInfo  {
  string inviterUserID = 1;
  repeated string invitedUserIDList = 2;
  string customData = 3;
  string  groupID = 4;
  string roomID = 5;
  int32 timeout = 6;
  string mediaType = 7;
  int32 platformID = 8;
  int32 sessionType = 9;
  int64 initiateTime = 10;
  repeated string busyLineUserIDList = 11;
}

message InviteMeetingReq {
  InvitationInfo invitation = 1;
//  sdkws.OfflinePushInfo offlinePushInfo  = 2;
  ParticipantMetaData participant = 3;
//  string userID = 4;
}


message InviteMeetingResp {
  string token = 1;
  string roomID = 2;
  string liveURL = 3;
  repeated string busyLineUserIDList = 4;
}

message InviteInGroupReq {
  InvitationInfo invitation = 1;
  sdkws.OfflinePushInfo offlinePushInfo  = 2;
  ParticipantMetaData participant = 3;
//  string userID = 4;
}

message InviteInGroupResp {
  string token = 1;
  string roomID = 2;
  string liveURL = 3;
  repeated string busyLineUserIDList = 4;
}

message  JoinMeetingReq {
  string roomID = 1;
//  string userID = 2;
  ParticipantMetaData participant = 2;
}

message JoinMeetingResp{
  string token = 1;
  string roomID = 2;
  string liveURL = 3;
}

message UpdateMeetingInfoReq {
  string roomID = 1;
  string meetingName = 2;
  int64  startTime = 3;
  int64  endTime = 4;
  int64  meetingConfigFlag = 5;
  repeated TypeUserIdListData userIDList = 6;
}

message UpdateMeetingInfoResp {

}

message ShareTypeInfo {
  int32  type = 1;
  int32  value = 2;
}

message OnShareMeetingReq {
  ShareTypeInfo shareInfo = 1;
}

message OnShareMeetingResp {

}

message CloseMeetingReq {
  string roomID = 1;
}

message CloseMeetingResp {

}

message LeaveMeetingReq {
  string roomID = 1;
  int32 type = 2;
  int64 value = 3;
}

message LeaveMeetingResp {

}

message TypeUserListValueData {
  int64 userID = 1;
  string name = 2;

}

message UpdateMeetingParticipateInfoReq {
  // 头像?
  TypeUserListValueData userValueData = 1;
}

message UpdateMeetingParticipateInfoResp {
  TypeUserListValueData userValueData = 1;
}

message GetMeetingHistoryListReq {

}

message MeetingHistoryLiteInfo {
  string roomId = 1;
  int64 startTime = 2;
  int64 endTime = 3;
  TypeUserIdListData hostUserList = 4;
  repeated TypeUserListValueData participateUserList = 5;
}

message GetMeetingHistoryListResp {
  repeated MeetingHistoryLiteInfo meetingHistoryList = 1;
}

message GetMeetingHistoryDetailReq {

}

message GetMeetingHistoryDetailResp {

}

service MeetingService {

  // configuration
  rpc UpdateUserGlobalMeetingConf(UpdateUserGlobalMeetingConfReq) returns(UpdateUserGlobalMeetingConfResp);

  // meeting
  //// prebook
  rpc CreatePreBookMeeting(PreBookCreateMeetingReq) returns(PreBookCreateMeetingResp);
  rpc UpdatePreBookMeeting(PreBookUpdateMeetingReq) returns(PreBookUpdateMeetingResp);

  //// quick start
  rpc CreateQuickMeeting(QuickCreateMeetingReq) returns(QuickCreateMeetingResp);
  rpc InviteMeeting(InviteMeetingReq) returns(InviteMeetingResp);
  rpc InviteGroupInMeeting(InviteInGroupReq) returns(InviteInGroupResp);
  rpc JoinMeeting(JoinMeetingReq) returns(JoinMeetingResp);
  rpc LeaveMeeting(LeaveMeetingReq) returns(LeaveMeetingResp);
  rpc DeleteMeetingRecords(DeleteMeetingRecordsReq) returns(DeleteMeetingRecordsResp);

  /// update
  rpc UpdateMeetingInfo(UpdateMeetingInfoReq) returns(UpdateMeetingInfoResp);
  rpc UpdateMeetingParticipateInfo(UpdateMeetingParticipateInfoReq) returns(UpdateMeetingParticipateInfoResp);

  // share stuff
  //// Audi，livestream stuff are handled on and off in this function,
  rpc OnShareMeeting(OnShareMeetingReq) returns(OnShareMeetingResp);
  rpc CloseMeeting(CloseMeetingReq) returns(CloseMeetingResp);

  /// history data
  rpc GetMeetingHistoryList(GetMeetingHistoryListReq) returns(GetMeetingHistoryListResp);
  rpc GetMeetingHistoryDetail(GetMeetingHistoryDetailReq) returns(GetMeetingHistoryDetailResp);
}
